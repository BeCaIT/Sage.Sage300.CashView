<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Accounts" xml:space="preserve">
    <value>Accounts</value>
  </data>
  <data name="BRN" xml:space="preserve">
    <value>Business Reg. No.</value>
  </data>
  <data name="BRYear" xml:space="preserve">
    <value>Business Reg. Year</value>
  </data>
  <data name="BRYearCalculated" xml:space="preserve">
    <value>Business Reg. Year (Calc.)</value>
  </data>
  <data name="Contact" xml:space="preserve">
    <value>Key Contact</value>
  </data>
  <data name="Country" xml:space="preserve">
    <value>Country</value>
  </data>
  <data name="Current" xml:space="preserve">
    <value>Current</value>
  </data>
  <data name="CurrentDate" xml:space="preserve">
    <value>Current Date</value>
  </data>
  <data name="CurrentPeriod" xml:space="preserve">
    <value>Current Period</value>
  </data>
  <data name="CurrentYear" xml:space="preserve">
    <value>Current Year</value>
  </data>
  <data name="DefaultForecastNumber" xml:space="preserve">
    <value>Default Forecast Entry Number</value>
  </data>
  <data name="DocumentType" xml:space="preserve">
    <value>Document Type</value>
  </data>
  <data name="Dummy" xml:space="preserve">
    <value>Dummy</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="EmailAddress" xml:space="preserve">
    <value>Sender's Email</value>
  </data>
  <data name="EmailAdvisory" xml:space="preserve">
    <value>ADVISORY</value>
  </data>
  <data name="EmailAdvisoryText" xml:space="preserve">
    <value>Email is used to communicate alerts when cash flow thresholds are breached. It is also used to communicate marketing materials on Sage Software and its business alliance’s products/services. You should ensure the email recipients entered here are the right people to receive such notifications.&lt;br/&gt;Each time an email test is done, the program will also include Info.Asia@sage.com, with a copy of the Options report.&lt;br/&gt;</value>
  </data>
  <data name="EmailAlert" xml:space="preserve">
    <value>Use Email for Notification</value>
  </data>
  <data name="EmailHost" xml:space="preserve">
    <value>Server Name</value>
  </data>
  <data name="EmailOffer" xml:space="preserve">
    <value>I understand, agree and confirm that:&lt;br/&gt;(a) only Recipients’ business email addresses are provided;&lt;br/&gt;(b) I consent and have obtained consent from all Recipients to receive marketing material on Sage Software and its business alliance’s products/services;&lt;br/&gt;(c) I undertake to update this S/C Setup Options – Email tab within 10 business days of any consent withdrawal notified to me.&lt;br/&gt;To unsubscribe from marketing materials not generated by Sage 300 CashView module, please email dataprotection.apac@sage.com or use the links provided in emails sent.</value>
  </data>
  <data name="EmailPassword" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="EmailPasswordString" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="EmailPort" xml:space="preserve">
    <value>Server Port</value>
  </data>
  <data name="EmailSendTest" xml:space="preserve">
    <value>Send Test Email</value>
  </data>
  <data name="EmailSettings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="EmailSnoozeUntil" xml:space="preserve">
    <value>Snooze Email Until</value>
  </data>
  <data name="EmailSSL" xml:space="preserve">
    <value>Use SSL</value>
  </data>
  <data name="EmailTest" xml:space="preserve">
    <value>To</value>
  </data>
  <data name="EmailTestFailed" xml:space="preserve">
    <value>Failed to send Test email.\nPlease verify your settings.</value>
  </data>
  <data name="EmailTestSuccessed" xml:space="preserve">
    <value>Test email sent successfully. Please check your inbox.</value>
  </data>
  <data name="EmailTo" xml:space="preserve">
    <value>Recipients' Emails</value>
  </data>
  <data name="EmailUser" xml:space="preserve">
    <value>User Name</value>
  </data>
  <data name="Entity" xml:space="preserve">
    <value>S/C Options</value>
  </data>
  <data name="EntityType" xml:space="preserve">
    <value>Entity Type</value>
  </data>
  <data name="EntityTypeAU" xml:space="preserve">
    <value>Entity Type</value>
  </data>
  <data name="EntityTypeHK" xml:space="preserve">
    <value>Entity Type</value>
  </data>
  <data name="EntityTypeMY" xml:space="preserve">
    <value>Entity Type</value>
  </data>
  <data name="EntityTypeNZ" xml:space="preserve">
    <value>Entity Type</value>
  </data>
  <data name="EntityTypeSG" xml:space="preserve">
    <value>Entity Type</value>
  </data>
  <data name="FE" xml:space="preserve">
    <value>Forecast Entry</value>
  </data>
  <data name="FEDocumentDefault" xml:space="preserve">
    <value>Default Forecast Number</value>
  </data>
  <data name="FEDocumentNext" xml:space="preserve">
    <value>Next Forecast Number</value>
  </data>
  <data name="FELength" xml:space="preserve">
    <value>Forecast Entry Number Length</value>
  </data>
  <data name="FENextNumber" xml:space="preserve">
    <value>Forecast Entry Next Number</value>
  </data>
  <data name="FEPrefix" xml:space="preserve">
    <value>Forecast Entry Prefix</value>
  </data>
  <data name="FunctionalCurrency" xml:space="preserve">
    <value>Functional Currency</value>
  </data>
  <data name="IncludePendingAP" xml:space="preserve">
    <value>Include Pending A/P Transactions</value>
  </data>
  <data name="IncludePendingAR" xml:space="preserve">
    <value>Include Pending A/R Transactions</value>
  </data>
  <data name="IncludePendingGL" xml:space="preserve">
    <value>Include Pending G/L Transactions</value>
  </data>
  <data name="Industry" xml:space="preserve">
    <value>Industry</value>
  </data>
  <data name="IndustryAU" xml:space="preserve">
    <value>Industry</value>
  </data>
  <data name="IndustryHK" xml:space="preserve">
    <value>Industry</value>
  </data>
  <data name="IndustryMY" xml:space="preserve">
    <value>Industry</value>
  </data>
  <data name="IndustryNZ" xml:space="preserve">
    <value>Industry</value>
  </data>
  <data name="IndustrySG" xml:space="preserve">
    <value>Industry</value>
  </data>
  <data name="JobTitle" xml:space="preserve">
    <value>Job Title</value>
  </data>
  <data name="LastProcessedDate" xml:space="preserve">
    <value>Last Processed Date</value>
  </data>
  <data name="LastProcessedTime" xml:space="preserve">
    <value>Last Processed Time</value>
  </data>
  <data name="Length" xml:space="preserve">
    <value>Length</value>
  </data>
  <data name="Mobile" xml:space="preserve">
    <value>Mobile Phone</value>
  </data>
  <data name="NextForecastNumber" xml:space="preserve">
    <value>Next Forecast Entry Number</value>
  </data>
  <data name="NextNumber" xml:space="preserve">
    <value>Next Number</value>
  </data>
  <data name="Over" xml:space="preserve">
    <value>Over</value>
  </data>
  <data name="Period1End" xml:space="preserve">
    <value>Period 1 End</value>
  </data>
  <data name="Period1Start" xml:space="preserve">
    <value>Period 1 Start</value>
  </data>
  <data name="Period2End" xml:space="preserve">
    <value>Period 2 End</value>
  </data>
  <data name="Period2Start" xml:space="preserve">
    <value>Period 2 Start</value>
  </data>
  <data name="Period3End" xml:space="preserve">
    <value>Period 3 End</value>
  </data>
  <data name="Period3Start" xml:space="preserve">
    <value>Period 3 Start</value>
  </data>
  <data name="Period4End" xml:space="preserve">
    <value>Period 4 End</value>
  </data>
  <data name="Period4Start" xml:space="preserve">
    <value>Period 4 Start</value>
  </data>
  <data name="Period5End" xml:space="preserve">
    <value>Period 5 End</value>
  </data>
  <data name="Period5Start" xml:space="preserve">
    <value>Period 5 Start</value>
  </data>
  <data name="Period6End" xml:space="preserve">
    <value>Period 6 End</value>
  </data>
  <data name="Period6Start" xml:space="preserve">
    <value>Period 6 Start</value>
  </data>
  <data name="Phone" xml:space="preserve">
    <value>Telephone</value>
  </data>
  <data name="Prefix" xml:space="preserve">
    <value>Prefix</value>
  </data>
  <data name="ProcessCommand" xml:space="preserve">
    <value>ProcessCommand</value>
  </data>
  <data name="ProcessingDocumentNumbers" xml:space="preserve">
    <value>Document Numbers</value>
  </data>
  <data name="ProcessingForecastPeriod" xml:space="preserve">
    <value>Forecast Periods</value>
  </data>
  <data name="ProcessingSettings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="ProcessingStatistics" xml:space="preserve">
    <value>Statistics</value>
  </data>
  <data name="Rate" xml:space="preserve">
    <value>Conversion Rate</value>
  </data>
  <data name="RateDate" xml:space="preserve">
    <value>RateDate</value>
  </data>
  <data name="RateOperator" xml:space="preserve">
    <value>Rate Operator</value>
  </data>
  <data name="ReportingCurrency" xml:space="preserve">
    <value>ReportingCurrency</value>
  </data>
  <data name="TabAccounts" xml:space="preserve">
    <value>Accounts</value>
  </data>
  <data name="TabCompany" xml:space="preserve">
    <value>Company</value>
  </data>
  <data name="TabEmail" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="TabProcessing" xml:space="preserve">
    <value>Processing</value>
  </data>
  <data name="Threshold" xml:space="preserve">
    <value>Threshold</value>
  </data>
</root>